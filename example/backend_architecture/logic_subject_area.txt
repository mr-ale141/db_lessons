	Логика предметной области

Любое приложение работает в одной или нескольких предметных областях.
	* Приложение решает определённые задачи в рамках предметной области
	* Предметная область всегда создаёт определённые правила, ограничения, особенности

	Модель

Модель (англ. Model) — это класс, моделирующий некоторый объект в рамках определённой предметной области.

Моделировать можно:
	* Сущность реального мира, например, автомобиль (Сar) или книга (Book)
	* Концепцию, которая не соответствует физическому объекту, но всё же относится к реальному 
		миру — например, маршрут (Route)
	* Сущность, которая отсутствует в реальном мире и имеет смысл только в цифровой среде — например, 
		электронный домент (Document) или диалог (Dialog)

	Infromation Expert

В системе шаблонов GRASP есть два связанных шаблона проектирования:
	* Информационный эксперт (Infromation Expert) — это класс, который хранит и данные, 
		и методы для их обработки
	* Чистая выдумка (Pure Fabrication) — класс, который не имеет аналогов в предметной 
		области и обычно хранит только методы обработки данных, но не сами данные

Любая модель предметной области:
	* соответствует шаблону «Информационный эксперт»
	* не соответствует шаблону «Чистая выдумка»

Другими словами, модель хранит и данные, и методы для их обработки, а также соответствует чему-либо, 
имеющему самостоятельный смысл в предметной области.

	Сущность

Сущность (англ. Entity) — это модель предметной области, обладающая идентичностью и собственным жизненным циклом.

Примеры Entity в LMS (Learning Management System, рус. система дистанционного обучения):
	* Сущность User (пользователь LMS)
		- Пользователь имеет идентичность (обычно за счёт идентификатора) и свой жизненный цикл 
			(от регистрации до удаления)
	* Сущность Course (учебный курс)
	* Сущность Enrollment (назначение курса на пользователя)
		- Назначение тоже имеет свой жизненный цикл, поскольку его можно редактировать (меняя сроки прохождения), 
			отменять или переназначать (например, для повторной сертификации через год после завершения предыдущей)

	Инварианты сущности

Инвариант — это бизнес-правило, которое должно соблюдаться в любом непротиворечивом состоянии системы независимо 
от выполняемых действий.

Для примера представим себе объект «Заказ» (англ. Order), в котором есть:
	* Список продуктов с указанием их цены (price) и количества (quantity)
	* Общая стоимость (total)
	* Размер скидки (discount)
	
Можно озвучить следующие инварианты:
	* Общая стоимость должна совпадать с суммой стоимостей всех продуктов
		- Инвариант: total = SUM(price × quantity)
	* Размер скидки должен быть меньше общей стоимости
		- Инвариант: discount < total
	* Количество единиц продукта в заказе должно быть положительным, а цена — неотрицательной 
		(иногда может быть нулевой для подарочных продуктов)
		- Инварианты: item.quantity > 0 и item.price ≥ 0

Независимо от действий с сущностью «Заказ» (Order) эти инварианты должны соблюдаться.

	Анемичная сущность

Анемичной называют сущность, которая не содержит внутренней логики и зачастую не обеспечивает никаких 
внутренних инвариантов.
	* Внутреннее состояние такой сущности очень легко нарушить
	* Для создания такой сущности достаточно написать класс, в котором есть только методы получения и 
		установки свойств и нет никакой инкапсуляции состояния

Допустим, класс сущности «Заказ» позволяет прямо установить Total и Discount:

	class Order
	{
		// [...]

		public function setTotal(float $total): void
		{
			$this->total = $total;
		}

		public function setDiscount(float $discount): void
		{
			$this->discount = $discount;
		}
	}

В такой ситуации очень легко неправильно вызвать методы класса и этим нарушить как минимум два инварианта:
	* Инвариант total = SUM(price × quantity)
	* Инвариант discount < total

	Rich Domain Model

Решением проблемы анемичных моделей служит насыщенная модель предметной области (англ. Rich Domain Model)
	* Такая модель также лучше соответствует паттерну «Информационный эксперт» — данные и методы 
		их обработки находятся в одном класса
		- Иными словами, бизнес-логика операции располагается там, где есть информация 
			(данные) для этой операции
			
Пример класса заказа, являющегося Rich Domain Model:

	class Order
	{
		/** @var OrderItem[] */
		private array $items = [];

		// ...

		public function addProduct(string $product, int $quantity, float $price): void
		{
			// 1. Создать объект OrderItem и добавить его в поле $items
			// 2. Увеличить сумму Total
		}

		public function applyDiscount(DiscountCoupon $coupon): void
		{
			// 1. Применить скидку к продуктам, на которые действует купон
			// 2. Сохранить новую сумму Discount
			// 3. Сохранить новую сумму Total
		}
	}

	Агрегаты

Агрегат (англ. Aggregate) — это класс модели, который включает в себя несколько других классов моделей 
и позволяет работать с ними только через свой интерфейс
	* Такое включение называется композицией, а не агрегацией
		- Композиция класса Child классом Parent означает, что класс Child не имеет смысла в 
			отрыве от класса Parent
		- Агрегация класса Child классом Parent означает, что класс Parent хранит ссылку на Child, 
			но объект Child может существовать и отдельно от Parent в рамках логики предметной области

Сущность OrderItem (продукт в ордере) не имеет смысла без сущности Order, поэтому Order включает её и 
становится агрегатом.

Кстати, в предыдущем примере кода Order уже был агрегатом:

	class Order
	{
		/** @var OrderItem[] */
		private array $items = [];

		// ...

		public function addProduct(string $product, int $quantity, float $price): void
		{
			// 1. Создать объект OrderItem и добавить его в поле $items
			// 2. Увеличить сумму Total
		}

		public function applyDiscount(DiscountCoupon $coupon): void
		{
			// 1. Применить скидку к продуктам, на которые действует купон
			// 2. Сохранить новую сумму Discount
			// 3. Сохранить новую сумму Total
		}
	}

	Связь между сущностями

Если две сущности связаны между собой внешним ключом в базе данных, но одна из них не включает другую 
как агрегат, то следует сделать так:
	* В сущности хранить только идентификаторы (ключи) на связанную сущность
	* Не хранить ссылку на объект другой сущности

Для агрегатов наоборот — в свойствах сами зависимые объекты, а не их идентификаторы.

	Сущность и база данных

* Простая сущность в приложении обычно соответствует одной таблице в базе данных
* Агрегат в приложении может соответствовать нескольким таблицам — одна таблица на каждую сущность, 
включённую в агрегат

С точки зрения сохранения сущности в базу данных есть лишь один значимый вопрос — идентичность. 
Идентичность в реляционной СУБД обеспечивается ключом таблицы.

	Виды ключей

С точки зрения предметной области, ключи в реляционной базе данных могут быть естественными или суррогатными
	* Естественные ключи имеют смысл в предметной области, например: email или ФИО человека 
		(хотя ФИО обычно не обладает свойством уникальности и потому чаще всего не годится на роль ключа)
	* Суррогатные ключи не имеют самостоятельного смысла и введены только для идентификации сущности в системе
		- Автоинкрементный ключ — это самый простой вариант суррогатного (искуственного) ключа.
		- В специальных случаях программист может принять решение использовать другие суррогатные ключи — 
			например UUID (подходит для распределённых систем) или Hash (подходит для аналитических систем)

Если сущность использует суррогатный автоинкременный ключ, то
	* Значение ключа определит база данных при первом сохранении модели с помощью запроса INSERT
	* Код должен учитывать, что ключ может быть не определён до сохранения модели

	Сущность с nullable ключом

Итого представления автоинкрементного ключа достаточно сделать его nullable в классе сущности:

	class Article
	{
		public function __construct(
			private ?int $id,
			private string $title,
			private string $content,
		)
		{
		}

		public function getId(): ?int
		{
			return $this->id;
		}

		public function getTitle(): string
		{
			return $this->title;
		}

		public function getContent(): string
		{
			return $this->content;
		}
	}

Идентификаторы сторонних сущностей могут и не быть nullable, потому что сторонние сущности должны быть 
сохранены до того, как будет установлена их связь с нашей сущностью.
