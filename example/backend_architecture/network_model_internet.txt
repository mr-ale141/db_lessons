Уровень протокола		Примеры протоколов
-----------------------------------------------------------------------
Прикладной уровень		HTTP, HTTPS, DNS, WebSockets, FTP, Telnet, STMP
Транспортный уровень	TCP, UDP
Уровень сети Интернет	IPv4, IPv6
Сетевой интерфейс		Ethernet, Wi-Fi

	1. Сетевой интерфейс

Протоколы этого уровня определяют способ передачи цифровых данных (последовательностей байт) 
по аналоговым каналам связи, таким как радиосвязь, оптоволокно, кабель.
	* Протокол Ethernet определяет способ скоростной передачи данных по оптоволокну или кабелю
	* Протокол WiFi определяет способ скоростной передачи данных 
		по ближней радиосвязи (на расстояниях не более десятков метров)
Данный уровень отвечает за две вещи:
	* За передачу пакетов данных — то есть последовательностей байт (обычно определённой длины)
	* За обеспечение базовой надёжности передачи данных по ненадёжному физическому 
		каналу связи — например, за счёт кодов коррекции ошибок

	2. Уровень сети Интернет

На данном уровне находится протокол IP, работающий поверх протоколов сетевых интерфейсов.

Internet Protocol (сокр. IP) — это базовый протокол для передачи пакетов между устройствами 
в сети Интернет. IPv4 и IPv6 — две версии данного протокола.

Каждый компьютер в этой сети имеет свой IP-адрес (англ. IP Address) — это адрес отправителя 
или получателя IP-пакета в сети

В рамках Internet Protocol это происходит путём передачи IP-пакетов 
(англ. IP packets) — пакетов информации, к которым добавлен заголовок.

Заголовок IP-пакета содержит IP-адреса отправителя и получателя пакета, что позволяет 
промежуточным узлам передавать пакет байт по правильному адресу.

IP-пакет в виде IP-датаграммы (англ. IP datagram) передаётся средствами низлежаших протоколов 
сетевого интерфейса (например, по протоколу Ethernet).

	3. Транспортный уровень

Основные протоколы транспортного уровня — TCP и UDP.

	Протокол TCP

IP-пакеты могут быть потеряны по пути по множеству разных причин.

Протокол TCP (сокр. от Transmission Control Protocol) отвечает за надёжность доставки 
данных вне зависимости от потерь IP-пакетов.

Для обеспечения надёжности TCP библиотека для работы с сетью делает следующее:
	* Устанавливает и закрывает соединение
	* Может повторно отправить пакет
	* Отправляет пакеты по порядку, дожидаясь завершения отправки предыдущих 
		пакетов перед отправкой нового

Прокол TCP вводит понятие TCP-соединения (англ. TCP Connection), которое имеет жизненный цикл.

Жизненный цикл TCP-соединения обеспечивается определёнными правилами передачи IP-пакетов:
	* Для установки соединения TCP использует служебные IP-пакеты с командами SYN (синхронизация) 
		и ACK (подтверждение получения пакета)
	* После установки TCP-соединения и до конца его жизненного цикла периодически происходит 
		передача IP-пакетов с данными
	* Закрытие соединения выполняется либо штатным образом путём передачи пакетов FIN (завершение)
		и ACK (подтверждение получения пакета), либо по истечению периода времени (TCP connection timeout)
		- Обычно период жизни TCP-соединения составляет около 60 секунд, с возможностью продления 
			периода жизни путём отправки новых IP-пакетов

	4. Прикладной уровень

В сети Интернет используется множество протоколов прикладного уровня. Мы кратко рассмотрим только 
два из них — DNS и HTTP.

	Протокол DNS

DNS отвечает за получение IP-адреса по известному домену, например, gosuslugi.ru
	* DNS позволяет менять структуру сети и IP-адреса компьютеров, сохраняя для пользователей и 
		приложений возможность использовать домены для адресации получателей

	Протокол HTTP

HTTP (сокр. от Hypertext Transfer Protocol) построен поверх TCP/IP и имеет несколько версий:
	* HTTP/1 — устаревший, фактически не используется
	* HTTP/1.1 — действующий текстовый протокол, относительно прост в обработке
	* HTTP/2 — действующий бинарный протокол с несколькими улучшениями для повышения скорости передачи данных
	* HTTP/3 — по состоянию на 2024 год находится в процессе внедрения, отличается от предыдущих версий 
		прежде всего тем, что он работает поверх протоколов QUIC и UDP, а не протокола TCP

В рамках HTTP один компьютер, называемый HTTP-клиентом, отправляет данные другому компьютеру, 
называемому HTTP-сервером.

При этом:
	* HTTP-запрос (англ. HTTP Request) и HTTP-ответ (англ. HTTP Response) отправляются по TCP-соединению 
		в виде нескольких пакетов данных
	* HTTP-запрос и HTTP-ответ с точки зрения приложения являются структурами данных с определёнными полями

	Протокол HTTPS

HTTPS — это расширение протокола HTTP, которое обеспечивает информационную безопасность (англ. security) 
на основе двух вспомогательных протоколов:
	* TLS (сокр. от Transport Layer Security) —  действующий криптографический протокол, 
		обеспечивающий защищённую передачу данных в сети Интернет
	* SSL (сокр. от Secure Sockets Layer) — устаревший криптографический протокол, предшественник TLS

В современном HTTPS стал почти обязательным.

Хост localhost соответствует адресу 127.0.0.1, который является адресом так называемой loopback сети. 
Это значит, что запросы к localhost (как и запросы к 127.0.0.1) обрабатываются в рамках того же компьютера 
без передачи по сети.

	Связанные термины

	URL

URL (сокр. от Uniform Resource Locator) — это строка, позволяющая при участии протоколов DNS и HTTP 
однозначно определить адрес ресурса в сети Интернет
	* Под ресурсом понимается некоторый доступный клиентам по сети ресурс, который 
		обслуживается определённым сервером
	* Ресурс может быть документом, например, адресом страницы
	* Ресурс может быть адресом, по которому отправляются запросы на изменение данных, 
		например, для сохранения формы

URL используется HTTP-клиентом следующим образом:
	* scheme определяет прикладной протокол, который должен использовать клиент
	* hostname используется, чтобы с помощью протокола DNS определить IP-адрес получателя
	* все остальные части используются как внутренний идентификатор ресурса — сервер получает
		их как часть HTTP-запроса и интерпретирует как ему угодно
		
В HTTP-запросе передаётся URL без scheme и hostname. При этом обычно HTTP-клиент 
помещает hostname в заголовок "Host".

Так это выглядит в HTTP/1.1:
	GET /presentation/.../edit#slide=id.g1f0b HTTP/1.1
	Host: docs.google.com
	... другие заголовки

	... тело запроса

	HTTP Method

HTTP Method — это строка, представляющая одно слово (всегда глагол).

Всего стандарты HTTP допускают 9 глаголов в качестве HTTP Method.

Мы приведём только 5 наиболее важных для прикладного программиста глаголов:
	Метод
		Предназначение
		Типовые особенности
	GET
		Предназначен только для запроса данных
		Пустой Request Body. Серверу разрешено кэшировать ответы.
	HEAD
		Предназначен для запроса-проверки
		Пустой Request Body. Сервер должен отдать пустой Response Body.
	POST
		Предназначен для отправки данных или состояния
		Есть Request Body
	PUT
		Предназначен для отправки данных или состояния
		Есть Request Body
	DELETE
		Предназначен для удаления данных или состояния
​
HTTP-запрос всегда содержит HTTP Method.
	* В браузере при навигации по сайтам обычно используется метод GET
	* Иначе говоря, если пользователь браузера указывает известный ему адрес в адресной строке, 
		запрос на этот адрес будет отправлен с методом GET
	* При обычном переходе по ссылкам браузер также использует метод GET

Так это выглядит в HTTP/1.1:
	GET /presentation/.../edit#slide=id.g1f0b HTTP/1.1
	Host: docs.google.com
	... другие заголовки

	... тело запроса

	HTTP Status

HTTP Status — это целое число, добавляемое в HTTP-ответ сервера как ключевой индикатор результата запроса.

HTTP-статусы делятся на пять групп

HTTP-статусы 1xx — информационные
	Статус
		Что означает
	100 Continue
		Служебный код. Сообщает HTTP клиенту, что пора отправлять тело запроса. Обычно этот код обрабатывает 
			библиотека HTTP клиента, поэтому прикладной программист с таким статусом не сталкивается.

HTTP статусы 2xx — успешные
	Статус
		Что означает
	200 OK
		Запрос обработан успешно
	204 No Content
		Запрос обработан, возвращать нечего. Иногда его используют как ответ операции удаления
	206 Partial Content
		Сервер вернул только часть данных из-за заголовка Range
	… и другие

HTTP статусы 3xx — перенаправления
	Статус
		Что означает
	301 Moved Permanently
		Постоянное перенаправление. Используйте с опаской: браузеры часто кэшируют такой редирект надолго, 
			и в этом случае браузер вместо запроса к серверу будет сам совершать перенаправление 
			(даже если на сервере вы уже убрали редирект).
	302 Found
		Временное перенаправление. Клиенту разрешено поменять HTTP метод на GET
	303 See Other
		Временное перенаправление. Клиент должен поменять HTTP метод на GET
	307 Temporary Redirect
		Временное перенаправление.Клиенту запрещено поменять HTTP метод
	… и другие

HTTP статусы 4xx — ошибки клиента
	Статус
		Что означает
	400 Bad Request
		Ошибка в теле или заголовках запроса. Не тот формат файла, недопустимые параметры и т.д.
	401 Unauthorized
		Клиент не аутентифицирован, то есть назвался кем-то, но проверка подлинности не прошла
	403 Forbidden
		Клиент не авторизован, то есть проверка подлинности прошла успешно, но прав для такого запроса недостаточно
	404 Not Found
		Указанный ресурс не найден. Обычно означает неправильный URL либо неправильный Method
	… и другие

HTTP статусы 5xx — ошибки сервера
	Статус
		Что означает
	500 Internal Server Error
		Ошибка сервера. Обычно означает исключение (ошибку) в приложении
	502 Bad Gateway
		Веб-сервер не может обратиться к реальному серверному приложению. Обычно возникает, 
			когда веб-сервер не смог передать запрос PHP-приложению из-за его недоступности
	504 Gateway Timeout
		Веб-сервер не дождался ответа реального серверного приложения. Обычно возникает, 
			когда PHP-приложение не ответило веб-серверу вовремя
	… и другие
