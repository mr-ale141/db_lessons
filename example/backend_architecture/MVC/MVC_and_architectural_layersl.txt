	MVC и архитектурные слои

Model-View-Controller, или просто MVC — это шаблон проектирования, описывающий 
верхнеуровневую архитектуру приложений.

Шаблон MVC пригоден в различных сферах и на разных программных платформах, 
при этом выглядит на них по-разному.

	Как появился MVC

Шаблон MVC был представлен в 1979 году в качестве решения для задачи разделения сложного 
приложения с пользовательским интерфейсом (англ. User Interface или UI) на небольшие, 
хорошо управляемые и переиспользуемые компоненты.

	Учимся понимать MVC

	Архитектурные слои

Для понимания MVC потребуется термин архитектурный слой, или просто слой:

Архитектурный слой (англ. Layer) — это набор компонентов программы (классов в объектно-ориентированном 
коде или файлов в процедурном), выполняющих схожие подзадачи для различных бизнес-сценариев приложения.

	* Слои образуют иерархию и вышестоящий слой использует ресурсы (т.е. классы и функции) 
		нижестоящего слоя
	* В решении каждого бизнес-сценария обычно принимают участие все слои одновременно
	
При этом понятие архитектурного слоя условно зависит от контекста, а в реальном проекте могут 
использоваться разные способы отделять слои друг от друга.

	Архитектурные слои в MVC

С точки зрения MVC, приложение разделяется на три архитектурных слоя:
	* Model — отвечает за внутреннюю логику программы, позволяющую решить задачу пользователя
		- Реализация слоя Model должна соответствовать ожиданиям эксперта предметной области в роли 
			пользователя — а точнее ментальной модели программы в его голове
	* View (слой представления) — отвечает за пользовательский интерфейс, то есть за представление 
		информации пользователю
	* Controller — управляет взаимоотношениями между слоями View и Model

Соотношение между классами:
	* Один контроллер (Controller) использует одно или несколько представлений (View)
	* Один контроллер (Controller) использует одну или несколько моделей (Model)
	* Одна модель может переиспользоваться в разных контроллерах
	* Одно представление также может использоваться в разных контроллерах

	MVC в приложениях с GUI

Способ реализации MVC определяется сферой применения, а также особенностями языка программирования 
и используемого фреймворка.

Рассмотрим, как применяется MVC в приложениях, предоставляющих графический интерфейс пользователя 
(англ. Graphical User Interface или GUI).
	
	MVC в Deskop приложениях

Представим себе следующую задачу:
	Есть Desktop редактор для написания и публикации статей. Нужно реализовать в редакторе диалог 
		переименования статьи.

Здесь присутствуют (см. MVC_1.png):
	* Слой View в виде двух классов, представляющих компоненты интерфейса
		- TextEdit (поле ввода для текста)
		- Button (кнопка  с надписью) — используется в диалоге дважды
	* Слой Model в виде класса Article, представляющий программную модель редактируемой статьи
		- Класс Article имеет метод rename() и ряд других методов
		- В данной задаче используется только метод rename()
	* Слой Controller в виде класса ArticleRenameController
		- Контроллер агрегирует классы со слоёв View и Model
		- Другими словами, класс контроллера хранит ссылки на экземпляры классов 
			Button, TextEdit и Article

Рассмотрим, как работает диалог переименования:
	* Когда происходит отображение диалога, контроллер получает название статьи из модели 
		(класс Article) и записывает его в представление (класс TextEdit) в качестве 
		начального значения
	* Когда пользователь редактирует текст, контроллер выполняет проверку — если текст пуст, 
		то кнопка OK блокируется
	* Когда пользователь нажимает OK, контроллер получает текст из TextEdit вызывает метод 
		rename() класса Article

	Иерархия классов представлений

Классы или файлы на слое представлений (View) могут образовывать собственные иерархии.

Это позволяет создавать составные представления, отвечающие за целые диалоги, экраны 
или блоки элементов интерфейса.
	* Добавим класс ArticleRenameDialog, который соответствует представлению диалога 
		переименования статьи
	* Новый класс будет владеть объектами классов Button и TextEdit

Новая версия диаграммы классов (см. MVC_2.png).

	Иерархия классов моделей
	
Классы или файлы на слое моделей (Model) могут образовывать собственные иерархии.
	* Более того — то, что называется слоем Model в шаблоне MVC, на самом деле может быть 
		совокупностью нескольких разных архитектурных слоёв!
		
Статью в редакторе статей нужно уметь сохранять — например, в файл или в облачное хранилище.

Для этого добавим на диаграмму класс ArticleStore, который имеет два статических метода:
	* load(string $path): Article для загрузки статьи из файла
	* save(Article $article, string $path): void для сохранения статьи в файл
	
Новая диаграмма классов (см. MVC_3.png).

Обратите внимание на слои:
	* С точки зрения шаблона MVC классы Article и ArticleStore оба являются моделями
	* Однако с точки зрения архитектуры приложения в целом они находятся на разных слоях
		- Класс Article относится к слою бизнес-логики (Domain Layer)
		- Класс ArticleStore относится к слою доступа к данным (Persistence Layer)

Это значит, что при использовании шаблона MVC в программе может быть больше трёх слоёв.

	Архитектурные слои приложения

	MVC — это не вся архитектура

С точки зрения анализа архитектурных слоёв довольно часто смотрят не на шаблон MVC, а на более 
общую архитектурe программы, в которой:
	* Модель занимает центральное место
	* Шаблон MVC является лишь одним из используемых шаблонов проектирования, и отнюдь не главным из них

Controller и View из шаблона MVC решают совместно одну задачу — реализация пользовательского интерфейса — 
поэтому их часто считают одним слоем.

	Архитектура приложения в целом

Во многих приложениях выделяют четыре основных слоя:
	* Слой представления (англ. Presentation Layer), куда относится и Controller, 
		и View с точки зрения шаблона MVC
		- Его могут называть слоем контроллеров, если роль View в архитектуре приложения минимальна
	* Слой приложения (англ. Application Layer)
		- Иногда называется сервисным слоем (англ. Service Layer)
	* Слой предметной логики (англ. Domain Layer)
	* Слой доступа к данным (англ. Persistence Layer)
		- Иногда называется слоем инфраструктуры (англ. Infrastructure Layer), 
			что является обобщением задачи доступа к данным

Так может выглядеть иерархия слоёв (без учёта возможной инверсии управления — 
англ. Inversion of Control) (см. MVC_4.png).
