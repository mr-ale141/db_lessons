	Требования ACID

В этой статье мы обсудим ACID — набор требований, предъявляемый к транзакциям 
в реляционных базах данных.
	* ACID — это сокращение от четырёх требований: Atomicity, Consistency, 
		Isolation, Durability
	* Впервые ACID-совместимые транзакции были реализованы в IBM System R 
		в 1973 году
	* Требования ACID были сформулированы на десять лет позже — в 1983 году

	Требования ACID

Реляционная база данных при обработке транзакций должна выполнять четыре 
требования ACID.

	1. Атомарность

Атомарность (англ. atomicity) — результаты всех SQL-запросов в транзакции 
либо фиксируются полностью, либо не применяются вовсе

Когда приложение запрашивает фиксацию транзакции (COMMIT), СУБД должна 
либо зафиксировать все изменения, внесённые SQL-запросами в этой транзакции, 
либо откатить изменения этой транзакции и затем сообщить об ошибке.

Если приложение запрашивает откат транзакции (ROLLBACK), то СУБД должна 
откатить все внесённые в транзакции изменения.

	2. Согласованность

Согласованность (англ. consistency) — до и после фиксации транзакции должны 
выполняться все ограничения целостности

Ограничения целосности в базах данных включают в себя:
	* Ограничения уникальности потенциальных ключей — как первичных (PRIMARY KEY), 
		так и альтернативных (UNIQUE KEY)
	* Ограничения внешних ключей — внешний ключ ссылающейся таблицы всегда должен 
		указывать на существующий ключ ссылаемой таблицы
	* Ограничения типа данных, включая ограничения NOT NULL
	* Пользовательские ограничения, заданные ключевым словом CHECK в SQL

Ни применение транзакции, ни откат транзакции не должны приводить к появлению 
аномалий, нарушающих ограничения целостности, заданные схемой базы данных.

	3. Изоляция

Изоляция (англ. isolation) — результат параллельного выполнения нескольких 
транзакций должен быть таким же, как при последовательном выполнении тех же 
транзакций

Другими словами, несколько транзакций должны вносить одинаковые изменения в базу 
данных независимо от того, выполняются ли они параллельно или строго последовательно 
(когда следующая миграция начинается после завершения предыдущей).

Эти же правила касаются миграций, откатываемых из-за ошибки либо по запросу 
приложения.

	4. Устойчивость

Долговечность (англ. durability) — зафиксированная транзакция должна сохраниться 
на диске или в другой энергонезависимой памяти

Другими словами, зафиксированные транзакции не должны быть потеряны в случае 
аварийного завершения СУБД или отключения электропитания.

При этом незафиксированные транзакции, напротив, откатываются при восстановлении 
СУБД, завершённой аварийно.

	ACID на примере биллинга

Постановка задачи

Как и прежде, региональный мобильный оператор хранит личный счёт клиента, в котором 
указаны:
	* Номер телефона
	* Баланс счёта в рублях
	* Остатки минут и СМС

Также оператор поддерживает переводы денег между личными счетами клиентов без 
комиссии, при этом каждая операция перевода денег должна быть записана в базу данных.

Перевод денег и требования ACID

Допустим, клиент с номером +78362685453 решил перевести 400 рублей клиенту с номером 
+78362685445.

Если выполнять перевод денег вручную в транзакции SQL-запросами, получится такая 
серия запросов:

	BEGIN;

	INSERT INTO account_balance_transfer
	  (from_phone, to_phone, amount)
	VALUES ('+78362685453', '+78362685445', 400)
	;

	UPDATE account
	SET balance = balance - 400
	WHERE phone = '+78362685453';

	UPDATE account
	SET balance = balance + 400
	WHERE phone = '+78362685445';

	COMMIT;

1. Атомарность

Согласно принципу атомарности, если транзакция успешно фиксируется, то все три 
операции должны быть применены к базе данных:
	* Баланс номера +78362685453 должен уменьшиться на 400 рублей
	* Баланс номера +78362685445 — увеличиться на 400 рублей
	* В таблицу account_balance_transfer должна быть вставлена соответствующая 
		строка

Если транзакция откатывается (в том числе при ошибке выполнения COMMIT), то ни 
одно из указанных изменнеий не должно произойти.

2. Согласованность

До и после этой транзакции должны соблюдаться ограничения целостности.

Согласно принципу согласованности, до и после любых транзакций:
	* Не должно появиться дубликатов с одинаковым первичным ключом в таблице 
		account (ключ phone), таблице account_balance_transfer (ключ id) или в 
		каких-либо иных таблицах
	* Не должно быть строк в таблице account_balance_transfer таких, что значение 
		в from_phone или to_phone не соответствует ни одной строке таблицы account
	* Не должны быть нарушены ограничения типов, такие как атрибут UNSIGNED у 
		колонки balance

Например, на счету номера +78362685453 было 500 рублей. Одновременно два 
PHP-скрипта запускают две транзакции:
	* Первая транзакция переводит 400 рублей на номер +78362685445
	* Вторая транзакция списывает абонентскую плату в 300 рублей

Если применились бы обе транзакции, то на счету оказалась бы отрицательная сумма 
в -200 рублей.
	* Принцип согласованности исключает такие ситуации, но только при условии, 
		что ограничение задано схемой БД
	* СУБД ничего не знает об ограничениях, существующих лишь в коде приложения 
		либо в уме разработчика программы

3. Изоляция

Допустим, на счету номера +78362685453 было 1200 рублей.

Одновременно два PHP-скрипта запускают две транзакции:
	* Первая транзакция переводит 400 рублей на номер +78362685445
	* Вторая транзакция списывает абонентскую плату в 300 рублей

Принцип изоляции гласит, что не должно быть аномалий из-за параллельного выполнения 
двух транзакций.

Пример такой аномалии — lost update problem (проблема потерянного обновления). 
Эта проблема может выглядеть так:
	* Первая транзакция меняет баланс с 1200 на 800 рублей (списывает 400 рублей), 
		и фиксирует это состояние в базе данных
	* Вторая транзакция ошибочно меняет баланс с 1200 на 900 рублей (списывает 300 
		рублей), и фиксирует это состояние в базе данных

Проблема в том, что при строго последовательном выполнении результат был бы иным: 
	* первая транзакция уменьшила бы баланс до 800 рублей, а вторая — до 500 рублей.

На практике изоляция транзакций со стороны СУБД часто бывает неполной, т.к. полная 
изоляция привела бы к неприемлемому падению производительности СУБД в реальных 
приложениях. Мы обсудим это позже в отдельных статьях.

4. Устойчивость

Допустим, на счету номера +78362685453 было 1200 рублей.

Одновременно два PHP-скрипта запускают две транзакции:
	* Первая транзакция переводит 400 рублей на номер +78362685445
	* Вторая транзакция списывает абонентскую плату в 300 рублей

Допустим, первая транзакция успела зафиксироваться — и в этот момент MySQL упал 
с ошибкой Segmentation Fault (например, из-за очень редкого бага в MySQL).

После восстановления MySQL:
	* Все изменения первой транзакции должны сохраниться
	* Все изменения второй транзакции должны быть сброшены

Другими словами, на счету абонента должно остаться 800 рублей, и перевод 400 рублей 
на номер +78362685445 должен быть успешно выполнен.

	Альтернативы ACID-транзакциям

ACID-транзакции — не единственный способ организации надёжных бизнес-транзакций:
	* С точки зрения теории, существует альтернативное решение — минималистичные 
		BASE-транзакции на уровне СУБД и согласованность в конечном счёте на уровне 
		приложения
		- BASE расшифровывается как Basically Available, Soft state, Eventually 
			consistent
	* BASE вместо ACID упрощает реализацию транзакций со стороны СУБД — но 
		ответственность за транзакционную целостность переносится на приложение и 
		достигается с помощью нетривиальных техник, включая архитектуру на основе 
		шины событий, согласованность в конечном счёте и идемпотентность выполняемых 
		операций.

	Подытожим

Реляционная база данных при обработке транзакций должна выполнять четыре требования 
ACID:
	* Атомарность (англ. atomicity) — результаты всех SQL-запросов в транзакции либо 
		фиксируются полностью, либо не применяются вовсе
	* Согласованность (англ. consistency) — до и после фиксации транзакции должны 
		выполняться все ограничения целостности
	* Изоляция (англ. isolation) — результат параллельного выполнения нескольких 
		транзакций должен быть таким же, как при последовательном выполнении тех же 
		транзакций
	* Долговечность (англ. durability) — зафиксированная транзакция должна 
		сохраниться на диске или в другой энергонезависимой памяти

ACID-транзакции — не единственный способ организации надёжных бизнес-транзакций: 
	* альтернативой им являются BASE-транзакции, требующие особых техник на стороне 
		приложения для достижения свойств транзакций, необходимых в бизнес-процессах, 
		реализуемых приложением.

Тем не менее, реляционные СУБД реализуют именно ACID-транзакции.
