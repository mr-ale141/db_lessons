	Транзакции в SQL

В широком смысле словом транзакция обозначают операцию, которая может либо выполняться 
полностью, либо не выполняться вовсе.

	Термин «транзакция»

	Банковские транзакции

Банковская транзакция — это перевод денег с одного счёта на другой.

Представим ситуацию: Пётр Мелехов переводит 1000 рублей Мирону Коршунову, используя онлайн 
банкинг. Данная операция делится на две части:
	* Списать 1000 рублей со счёта Петра Мелехова
	* Зачислить 1000 рублей на счёт Мирона Коршунова

Очевидно, что такая транзакция должна либо выполниться полностью, либо завершиться неудачно 
(если, например, на счету Петра Мелехова недостаточно денег — или же нарушена связь между 
дата-центрами, в которых находятся сервисы двух разных банков).

	Транзакция в базах данных

В базах данных слово «транзакция» имеет несколько иной смысл:

Транзакция — это последовательность SQL-запросов, которая начинается с запроса BEGIN, 
завершается запросом COMMIT либо ROLLBACK и воспринимается базой данных как единая операция — 
то есть применяется полностью либо не применяется вовсе.

	Перевод денег в транзакции

Для выполнения действий в транзакции потребуется:
	* Сперва выполнить запрос BEGIN;
	* Затем выполнить серию SQL-запросов
	* И в конце выполнить либо COMMIT; для фиксации транзакции, либо ROLLBACK; для отката

	Транзакции и AUTO_INCREMENT

У каждой таблицы в MySQL может быть ровно одна колонка с атрибутом AUTO_INCREMENT.
	* Обычно данный атрибут используют для суррогатных ключей — то есть целочисленных 
		идентификаторов сущностей, возрастающих в процессе вставки записей 
		(т.е. при запросах INSERT)
	* В других СУБД есть аналогичные механизмы, например, типы данных SERIAL, SMALLSERIAL 
		и BIGSERIAL в PostgreSQL

При обработке транзакций MySQL всегда повышает счётчик AUTO_INCREMENT в таблице, 
и никогда не понижает его.
	* Иными словами, даже при откате транзакции в MySQL счётчик AUTO_INCREMENT 
		всё равно будет увеличен
	* Значит, при последовательном росте суррогатного автоинкрементного ключа в 
		последовательности ключей могут появиться пробелы из-за отменённых транзакций

Более того: при одновременной работе нескольких транзакций могут быть ситуации, когда запись 
с меньшим значением автоинкрементной колонки будет вставлена позже, чем запись с большим значением.
	* Например, сперва фиксируется транзакция со вставкой в таблицу user записи с user_id=16, 
		а потом фиксируется транзакция с user_id=15.
	* Обычно это случается на коротком интервале времени, т.к. на практике транзакции в SQL 
		редко длятся более минуты

	Транзакции и подъязык DDL

Операции DDL, такие как CREATE TABLE / ALTER TABLE / DROP TABLE, меняют схему базы данных — 
проще говоря, меняют правила игры для всех остальных запросов.

С точки зрения разработки СУБД, поддержка DDL внутри транзакций — сложная 
задача со множеством нюансов.

Поэтому разные СУБД решают этот вопрос по-разному:
	* MySQL при попытке выполнить DDL-запрос внутри транзакции сразу же завершает 
		активную транзакцию, а потом выполняет DDL-запрос
	* PostgreSQL в целом поддерживает DDL внутри транзакций
		- Однако на практике для больших и высоконагруженных таблиц возникнет множество 
			ограничений и оговорок
	* Microsoft SQL Server в целом поддерживает DDL внутри транзакций
		- Однако на практике для разных настроек СУБД могут возникать ограничения 
			и различные оговорки

	Подытожим

* В широком смысле транзакция — это операция, которая может либо выполняться полностью, 
	либо не выполняться вовсе.
* В базах данных транзакция — это последовательность SQL-запросов, которая начинается с 
	запроса BEGIN, завершается запросом COMMIT либо ROLLBACK и воспринимается базой данных 
	как единая операция — то есть применяется полностью либо не применяется вовсе
* Обработка транзакций в СУБД может иметь определённые особенности
	- При обработке транзакций MySQL всегда повышает счётчик AUTO_INCREMENT в таблице, 
		и никогда не понижает его даже при отмене транзакции
	- MySQL при попытке выполнить DDL-запрос внутри транзакции сразу же завершает 
		активную транзакцию, а потом выполняет DDL-запрос
