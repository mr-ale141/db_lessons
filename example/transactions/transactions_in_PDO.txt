	Транзакции и PDO

	Методы класса PDO

Расширение PHP-PDO позволяет управлять транзакциями с помощью специальных методов класса PDO:
	* beginTransaction() начинает транзакцию
	* commit() фиксирует текущую транзакцию
	* rollBack() откатывает текущую транзакцию
	* inTransaction(): bool возвращает true, если в данный момент для указанного соединения 
		есть активная транзакция

Можно было бы выполнять транзакции иначе:
	* Вызвать $pdo->execute('BEGIN') для запуска транзакции
	* Вызвать  $pdo->execute('COMMIT') для фиксации транзакции
	* ... и так далее

Однако следует помнить, что специализированные методы PDO ведут учёт состояния соединения на 
стороне PHP, поэтому попытка управлять транзакцию простым выполнением SQL-запросов 
BEGIN / COMMIT / ROLLBACK может вызвать неожиданные изменения в поведении PDO.

По этой причине используйте специальные методы beginTransaction(), commit() и rollBack().

Напишем функцию transferMoney(), которая выполняет два запроса UPDATE над таблицей account:

	Проблемы

* Нет проверки, что на балансе первого счёта есть нужная сумма денег перед списанием
* Нет обеспечения базовой гарантии безопасности исключений — если внутри метода будет 
	выброшено исключение, то транзакция останется незавершённой
	- Таким образом, соединение с базой данных (объект PDO) окажется в неожиданном 
		состоянии, и это вызовет проблемы при продолжении выполнения PHP-скрипта

	Базовая гарантия безопасности исключений

Чтобы обеспечить правильное состояние соединения, нужно гарантировано завершать начатую 
транзакцию в определённом месте.
	* В языке C++ мы бы применили try...catch либо идиому RAII
	* В языке Golang мы бы применили инструкцию defer

В языках с поддержкой исключений и сборкой мусора, таких как PHP, это достигается с помощью 
try...catch либо try...finally.

	Первый вариант — try...catch

	$connection->beginTransaction();
	try
	{
		// ... выполнение операций над данными
		$connection->commit();
	}
	catch (\Throwable $exception)
	{
		$connection->rollBack();
		throw $exception;
	}

Обратите внимание на следующее:
	* Вызов beginTransaction() не должен попадать внутрь try...catch, потому что запуск транзакции 
		может завершиться неудачно
	* Перехватывать нужно любые исключения, даже если класс исключения не наследуется от Exception 
		(как, например, встроенный класс TypeError)
		- В языке PHP выброшен может быть только объект, реализующий интерфейс Throwable — поэтому 
			мы его и перехватываем
	* После отката транзакции следует перевыбросить (англ. rethrow) исходное исключение, а не 
		подавлять и скрывать его

	Второй вариант — try...finally

	$connection->beginTransaction();
	$commit = false;
	try
	{
		// ... выполнение операций над данными
		$commit = true;
	}
	finally
	{
		if ($commit)
		{
			$connection->commit();
		}
		else
		{
			$connection->rollBack();
		}
	}

Данный вариант получился более многословным, потому что приходится выбирать между COMMIT и ROLLBACK.

	Проверка баланса перед списанием

Для проверки потребуется:
	* Выполнить SELECT-запрос, чтобы узнать текущий баланс счёта-отправителя
	* Сравнить баланс с количеством денег, отправляемых другому аккаунту
	* Если баланс недостаточен — выбросить исключение

Сделать это можно перед началом транзакции:

	$stmt = $connection->prepare(
		<<<SQL
		SELECT
		  balance
		FROM account
		  WHERE phone = :from_phone
		SQL
	);
	$stmt->execute(['from_phone' => $fromPhone]);
	$balance = $stmt->fetchColumn();

	if ($balance < $amount)
	{
		throw new \LogicException(
			"Cannot transfer money: account $fromPhone balance is less than transfer amount $amount"
		);
	}

	$connection->beginTransaction();
	// ...

	Подытожим

* Расширение PHP-PDO позволяет управлять транзакциями с помощью специальных методов класса PDO
	- Эти методы PDO ведут учёт состояния соединения на стороне PHP
* Код управления транзакциями должен обеспечивать базовую гарантии безопасности исключений
	* В языке PHP это достигается с помощью try...catch либо try...finally
