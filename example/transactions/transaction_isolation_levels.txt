
	Уровни изоляции транзакций

Мы выясним, какие механизмы используют СУБД для изоляции транзакций, какие уровни 
изоляции транзакций предоставляют и какие гарантии обеспечивают.

	Неявные блокировки в СУБД

Для изоляции транзакций СУБД используют блокировки, исключающие доступ к ресурсу 
другим транзакциям.

Например, Web-приложение регулярно выполняет SQL-запросы подобного вида:

	-- Получение данных аккаунта
	SELECT
	  phone,
	  balance,
	  sms_count,
	  minutes_count
	FROM account
	WHERE phone = :to_phone;

	-- Обновление данных аккаунта
	UPDATE account
	SET balance = :amount,
	  ...
	WHERE phone = :to_phone;

Блокировки позволяют транзакциям избегать одновременной работы в случаях, где это 
могло бы создать проблемы
	* Блокировка устанавливается, когда СУБД совершает SQL-запрос к таблице
		- На разные виды запросов могут устанавливаться разные блокировки — часто 
			бывает, что на запросы SELECT никакие блокировки не устанавиваются вовсе
	* Блокировка снимается, когда транзакция завершается фиксацией (COMMIT) или 
		откатом (ROLLBACK)
	* Блокировка привязана к определённой транзакции и существует не дольше, чем 
		транзакция и владеющее ею соединение

	Блокировки таблиц

СУБД имеет возможность использовать табличные блокировки.

Это могло бы выглядеть, например, так:
	* Первый PHP-скрипт запускает транзакцию
		- Транзакция получает номер: №5
	* Второй PHP-скрипт запускает транзакцию
		- Транзакция получает номер: №8
	* Первый PHP-скрипт выполняет запрос INSERT к таблице tag
		- СУБД блокирует таблицу tag для транзакции №5
	* Второй PHP-скрипт выполняет запрос UPDATE к таблице article
		- СУБД блокирует таблицу article для транзакции №8
	* Первый PHP-скрипт выполняет запрос INSERT к таблице article_tag
		- СУБД блокирует таблицу article_tag для транзакции №5
	* Второй PHP-скрипт выполняет запрос DELETE к таблице article_tag
		- СУБД уже заблокировала таблицу article_tag для транзакции №5, и не может 
			заблокировать её для транзакции №8

Результат: транзакция №8 ожидает, пока транзакция №5 освободит таблицу, и запрос 
DELETE FROM article_tag WHERE ... не завершается. В конечном счёте случится одно из двух:
	* Транзакция №5 освободит блокировку таблицы aritcle_tag, после чего транзакция №8 
		получит блокировку этой таблицы и продолжится
	* Транзакция №8 завершится неудачно, запрос DELETE FROM article_tag WHERE ... 
		вернёт ошибку

(рис. isolation_1.png)

	Блокировки строк

СУБД имеет возможность использовать блокировки отдельных строк таблиц вместо 
блокировки всей таблицы.

Блокировки строк позволяют разным транзакциям оперировать разными строками 
одной таблицы одновременно:

(рис. isolation_2.png)

	Блокировки страниц памяти

Напомним, что на физическом уровне каждая таблица в СУБД представляет собой 
лес B+-деревьев:
	* Каждое B+-дерево таблицы соответствует одному индексу таблицы
	* Данные строк хранятся в одном из индексов B+-дерева — а именно в 
		кластерном индексе, построенном по первичному ключу
	* Все B+-деревья состоят из узлов, причём один узел занимает ровно 
		одну страницу памяти
		- В MySQL по умолчанию страница памяти занимает 16 килобайт, 
			в PostgreSQL — 8 килобайт

(рис. isolation_3.png)

СУБД имеет возможность использовать блокировки страниц памяти — это промежуточный 
вариант между блокировкой таблицы целиком и блокировкой отдельных строк
	* В отличие от табличной блокировки, блокировка страницы памяти блокирует 
		лишь группу строк, расположенных на этой странице памяти
	* В отличие от блокировки строк, блокировка страницы памяти не требует 
		дополнительных усилий для синхронизации доступа двух транзакций к разным 
		строкам, расположенным на одной странице

	Так какие блокировки используют СУБД?

Современные СУБД отдают предпочтение блокировкам строк, но могут в некоторых случаях 
использовать блокировки страниц памяти или даже блокировки таблиц.

MySQL и ряд других СУБД позволяют программисту самостоятельно активировать блокировки 
таблиц: см. 15.3.6 LOCK TABLES and UNLOCK TABLES Statements. Впрочем, эта возможность 
не нужна для прикладных программ и используется лишь в некоторых режимах программ 
резервного копирования данных.
(https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html)

	Версионность строк

В прошлом реляционные СУБД обходились блокировками таблиц для обеспечения изоляции 
транзакций.

Современные СУБД умеют использовать иной механизм: версионирование строк таблицы.
	* Полное название механизма — Multi-Version Concurrency Control (MVCC)
	* Мы рассмотрим основную идею этого механизма — версионирование строк

Как работает версионность в MVCC

Мы рассматриваем версионность в упрощённом виде. На самом деле в СУБД всё намного 
сложнее — и MVCC можно считать одним из самых сложных механизмов внутри СУБД.

Допустим, что на физическом уровне мы изменим представление таблиц и способ работы с 
транзакциями:
	* У каждой транзакции появляется целочисленный номер
		- СУБД хранит номера всех незафиксированных (т.е. активных) транзакций
		- Новая транзакция всегда получает номер больше, чем предыдущая
	* Каждая строка может иметь несколько своих копий, которые мы назовём 
		версиями строки
	* У каждой версии строки появляются две скрытые колоки — например, since_version 
		и till_version
		- Колонка since_version хранит номер транзакции, вставившей эту 
			строку в СУБД
		- Колонка till_version хранит номер транзакции, удалившей эту строку в СУБД

(рис. isolation_4.png)

В этой таблице:
	* Транзакция №2 вставила строки с id=38 и id=39
	* Затем транзакция №5 вставила строки с id=17 и id=29, а также удалила строку с id=5

Версионность и запрос DELETE

Допустим, транзакция №8 выполняет SQL-запрос DELETE:

	DELETE
	FROM article
	WHERE id = 39
	
Вместо физического удаления строки СУБД лишь заполнит скрытую колонку till_version у 
активной версии строки:

(рис. isolation_5.png)

Физическое удаление строки из таблицы случится после фиксации транзакции №8 и 
завершения всех транзакций с меньшим номером.

Версионность и запрос UPDATE

Допустим, вместо удаления транзакция №8 решила обновить название статьи:

	UPDATE article
	SET title = 'Даталогические модели'
	WHERE id = 39

В этом случае СУБД выполнит две операции:
	* Пометит удалённой старую версию строки, установив ей till_version=8
	* Вставит в таблицу новую версию строки, установив ей since_version=8

Другими словами, СУБД заменяет любые обновления на удаление версии строки и вставку 
новой версии строки:

(рис. isolation_6.png)

Физическое удаление старой версии строки из таблицы случится после фиксации транзакции №8 
и завершения всех транзакций с меньшим номером.

Версионность и запрос SELECT

Допустим, одновременно с транзакцией №8 запущена другая транзакция №9, при этом
	* Транзакция №9 запущена до завершения транзакции №8
	* Транзакция №9 помнит номера всех завершённых транзакций, и помнит, что 
		транзакция №8 не завершена
	* Следовательно, транзакция №9 видит данные, записанные транзакциями с номерами 
		от 1 до 7, но не видит данных транзакции №8

Транзакция №9 выполняет чтение из таблицы:

	SELECT *
	FROM article
	WHERE id = 39

В этом случае СУБД позволит транзакции №9 прочитать старую версию строки:
(рис. isolation_7.png)

	Зачем нужен MVCC?

Версионность в Multi-Version Concurrency Control — это изящное решение проблем фантомных 
чтений (phantom read) и неповторяющихся чтений (non-repeatable read).
	* Начатая транзакция будет читать одни и те же данные при повторном выполнении одних 
		и тех же SQL-запросов
	* Это не мешает другим транзакциям записывать другие данные — они просто оперируют 
		своими версиями строк
	* При фиксации транзакций СУБД должна выбрать одно из двух:
		- либо принять версию строки фиксируемой транзакции как единственную
		- либо завершить транзакцию с ошибкой, если другая транзакция уже успела 
			зафиксировать свою версию той же строки

	Уровни изоляции транзакций

Уровни изоляции транзакций предназначены для решения некоторых (но не всех) проблем 
изоляции транзакций.
	* Оставшиеся проблемы могут быть отданы для решения самим программистом
	* Решение этих проблем может вызвать новые проблемы, которые тоже следует учитывать 
		программисту — мы обсудим это позже

	Список проблем

Напомним ряд теоретических проблем, которые могут возникать при нарушении изоляции 
параллельно выполняемых транзакций:
	* Потерянное обновление (англ. lost update) возникает, если две параллельные 
		транзакции меняют данные одной и той же строки и фиксация второй транзакции 
		приводит к потере изменений первой транзакции
	* Фантомное чтение (англ. phantom read) возникает, когда два последовательных 
		выполнения одного и того же SELECT-запроса в одной и той же транзакции дают 
		разный набор строк
	* Неповторяющееся чтение (англ. non-repeatable read) возникает, когда два 
		последовательных выполнения одного и того же SELECT-запроса в одной и той же 
		транзакции дают разные значения для одной и той же строки
	* Грязное чтение (англ. dirty read) возникает, когда SELECT-запрос в одной 
		транзакции видит результаты незафиксированных изменений другой транзакции
	* Перекос записи (англ. write skew) возникает, когда два параллельно выполняемых 
		экземпляра приложения в паралельных транзакциях принимают решение, которого 
		они никогда бы не приняли при последовательном выполнении, и приводят данные в 
		недопустимое состояние

Уровни изоляции транзакций нацелены на решение трёх проблем: грязное чтение, 
неповторяющееся чтение и фантомное чтение.

Уровни изоляции транзакций не нацелены на решение проблем потерянных обновлений 
(lost update) или перекоса записи (write skew)

	Уровни стандарта SQL

Стандарт SQL определяет четыре уровня изоляции транзакций:
	* READ UNCOMMITTED
	* READ COMMITTED
	* REPEATABLE READ
	* SERIALIZABLE

Согласно стандарту, только уровень SERIALIZABLE обеспечивает решение всех проблем:

	Название
		Грязное чтение (dirty read)
		Неповторяющееся чтение (non-repeatable read)
		Фантомное чтение (phantom read)
	READ UNCOMMITTED
		Возможно
		Возможно
		Возможно
	READ COMMITTED
		Исключено
		Возможно
		Возможно
	REPEATABLE READ
		Исключено
		Исключено
		Возможно
	SERIALIZABLE
		Исключено
		Исключено
		Исключено

Слово «Возможно» следует понимать как «допускается стандартом, но может быть исключено 
в реализации СУБД»

СУБД MySQL позволяет менять режимы изоляции транзакции в рамках одной сессии работы с 
базой данных (т.е. одного соединения):

	SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;

	SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

	SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;

	READ UNCOMMITTED

Не следует использовать режим READ UNCOMMITTED в приложениях.

Согласно стандарту SQL на уровне READ UNCOMMITTED допускается чтение «грязных» 
(незафиксированных) данных.

На практике это зависит от реализации
	* В MySQL обеспечена «честная» поддержка READ UNCOMMITTED — при включении этого 
		режима соединение будет видеть данные незавершённых транзакций в других 
		соединениях!
	* В PostgreSQL уровень фактически не поддерживается — при включении уровня 
		READ UNCOMMITED грязные чтения исключены

На практике возможны ситуации, где чтение данных чужих транзакций в режиме 
READ UNCOMMITED полезно — например, это позволяет выполнять отладку интеграционных 
тестов, использующих откат транзакций для изоляции тестов друг от друга.

	READ COMMITTED

Согласно стандарту SQL на уровне READ COMMITTED исключено чтение «грязных» 
(незафиксированных) данных.
	* Транзакция может видеть только те незафиксированные изменения, которые 
		внесла она сама
	* При этом возможны проблемы фантомных чтений и неповторяющихся чтений

Режим READ COMMITTED установлен по умолчанию в PostgreSQL.

	REPEATABLE READ

Согласно стандарту SQL на уровне REPEATABLE READ исключено как чтение «грязных» 
(незафиксированных) данных, так и неповторяющееся чтение.
	* Другими словами, однажды прочитанная строка таблицы останется видна для 
		транзакции в той же версии, в которой она была прочитана впервые, если 
		только сама транзакция не поменяет её
	* При этом транзакция по-прежнему видит собственные незафиксированные изменения 
		и не видит чужих незафиксированных изменений

Режим REPEATABLE READ установлен по умолчанию в MySQL.

REPEATABLE READ и MVCC

В современных СУБД данный уровень меняет своё поведение из-за внедрения 
Multi-Version Concurency Control
	* Благодаря Multi-Version Concurrency Control, современные СУБД могут решить 
		проблему фантомных чтений на уровне REPEATABLE READ
	* Разработчики MySQL и PostgreSQL решают проблему фантомных чтений на уровне 
		REPEATABLE READ благодаря MVCC
		- Эти СУБД построены на механизме MVCC и не позволяют его отключить
	* Разработчики Microsoft SQL Server придумали отдельное название для такого 
		уровня изоляции — SNAPSHOT
		- Фактически это тот же REPEATABLE READ с включённым механизмом MVCC 
			(который в Microsoft SQL Server необязателен)

	SERIALIZABLE

Не используйте данный режим в реальных системах, за исключением случаев, когда нет 
никакой нагрузки на сервис и заказчик допускает частые простои системы.

В этом режиме СУБД дожна решать все три феномена параллелизма транзакций: грязное 
чтение, неповторяющееся чтение и фантомное чтение.

При этом:
	* Обычно СУБД реализуют режим SERIALIZABLE за счёт блокировок таблиц, исключающих 
		параллельное обращение как запросов на чтение (SELECT), так и запросов 
		на запись (INSERT / UPDATE / DELETE) к одним и тем же таблицам
	* Таким образом, в режиме SERIALIZABLE следует ожидать, что только одна транзакция 
		может пользоваться таблицей, и следующая транзакция получит к ней доступ только 
		после завершения первой

Режим SERIALIZABLE фактически ведёт к невозможности параллельного доступа к одной 
таблице — такой режим допустим только для приложений, где нет конкуретности обработки 
запросов и нет долгих SQL-запросов.

	Реализация в MySQL

Повторим ещё раз: благодаря Multi-Version Concurrency Control, современные СУБД могут 
решить проблему фантомных чтений на уровне REPEATABLE READ

Поэтому в MySQL поведение на разных уровнях изоляции выглядит иначе:

	Название
		Грязное чтение (dirty read)
		Неповторяющееся чтение (non-repeatable read)
		Фантомное чтение (phantom read)
	READ UNCOMMITTED
		Возможно
		Возможно
		Возможно
	READ COMMITTED
		Исключено
		Возможно
		Возможно
	REPEATABLE READ (режим по умолчанию)
		Исключено
		Исключено
		Исключено
	SERIALIZABLE
		Исключено
		Исключено
		Исключено

	Реализация в PostgreSQL

Аналогично MySQL, СУБД PostgreSQL использует механизм Multi-Version Concurrency Control 
и тем самым решает проблему фантомных чтений на уровне REPEATABLE READ.

Кроме того, PostgreSQL не реализует отдельного уровеня READ UNCOMMITTED, а воспринимает 
его как синоним READ COMMITTED.

	Название
		Грязное чтение (dirty read)
		Неповторяющееся чтение (non-repeatable read)
		Фантомное чтение (phantom read)
	READ UNCOMMITTED (синоним READ COMMITTED)
		Исключено
		Возможно
		Возможно
	READ COMMITTED (режим по умолчанию)
		Исключено
		Возможно
		Возможно
	REPEATABLE READ 
		Исключено
		Исключено
		Исключено
	SERIALIZABLE
		Исключено
		Исключено
		Исключено

	Реализация в Microsoft SQL Server

В Azure SQL по умолчанию включён режим SNAPSHOT (в силу ранее озвученных проблем 
режима SERIALIZABLE).

В Microsoft SQL Server механизм Multi-Version Concurrency Control опционален и может 
быть выключен.
	* По этой причине вместо изменения поведения режима REPEATABLE READ в этой СУБД 
		придуман новый режим — SNAPSHOT.
	* Данный режим полностью аналогичен режиму REPEATABLE READ в PostgreSQL и MySQL

Матрица режимов изоляции и решаемых проблем для MS SQL выглядит так:

	Название
		Грязное чтение (dirty read)
		Неповторяющееся чтение (non-repeatable read)
		Фантомное чтение (phantom read)
	READ UNCOMMITTED (синоним READ COMMITTED)
		Возможно
		Возможно
		Возможно
	READ COMMITTED
		Исключено
		Возможно
		Возможно
	REPEATABLE READ 
		Исключено
		Исключено
		Исключено
	SERIALIZABLE (по умолчанию)
		Исключено
		Исключено
		Исключено
	SNAPSHOT
		Исключено
		Исключено
		Исключено

	Подытожим

	* Для изоляции транзакций СУБД используют блокировки, исключающие доступ к ресурсу 
		другим транзакциям
		- Современные СУБД умеют применять блокировки таблиц, блокировки строк и 
			блокировки целых страниц (т.е. групп строк)
		- Современные СУБД отдают предпочтение блокировкам строк, но могут в некоторых 
			случаях использовать блокировки страниц памяти или даже блокировки таблиц
	* Современные СУБД умеют использовать механизм Multi-Version Concurrency Control (MVCC), 
		основная идея которого — версионирование строк таблицы
		- В рамках MVCC в таблице СУБД могут быть одновременно несколько копий одной и 
			той же строки, и с каждой копией (версией) строки связаны номера транзакций, 
			создавших и удаливших эту копию
		- При фиксации транзакций СУБД устраняет лишние копии строк — или завершает одну 
			из двух транзакцию с ошибкой, если они изменили одни и те же строки
		- СУБД PostgreSQL и MySQL построены на MVCC и не позволяют его выключить, 
			а СУБД Microsoft SQL Server — позволяет (но выключение MVCC приведёт к 
			неприемлемой деградации производительности)
	* Стандарт SQL определяет четыре уровня изоляции транзакций
		- Уровни изоляции транзакций нацелены на решение трёх проблем: грязное чтение, 
			неповторяющееся чтение и фантомное чтение.
		- Уровни изоляции транзакций не нацелены на решение проблем потерянных обновлений 
			(lost update) или перекоса записи (write skew)
	* Влияние уровней изоляции транзакции на поведение запросов зависит от СУБД
