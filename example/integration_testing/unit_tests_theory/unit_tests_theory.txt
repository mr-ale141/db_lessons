	Теория модульных тестов

	Позитивные и негативные тесты

В модульных тестах и в тестировании в целом различают:
	* Позитивные тестовые сценарии, проверяющие нормальный путь выполнения программы без ошибок и отказов
	* Негативные тестовые сценарии, проверяющие работу программы на потенциально проблемных входных данных

	Увлечение негативными тестами

Начинающие разработчики и QA порой увлекаются проверкой негативных сценариев, забывая про основную цель тестирования.

Не забывайте о том, что:
	* Тестирование не может доказать отсутствие дефектов в программе
	* Основная цель тестирования — уверенность в том, что программа пригодна для 
		решения поставленных задач и имеет достаточный уровень качества

	Когда негативные тесты важны

Полнота проверки важна для низкоуровневых функций или сложной логики по двум причинам:
	* Дефект в низкоуровневой функции, работающей напрямую с памятью или данными, 
		может создать угрозу безопасности в виде критической уязвимости
	* Дефект в низкоуровневой функции, проявляющийся только на определённых данных, 
		может вызвать трудноуловимые и крайне неприятные дефекты
		- Представьте себе веб-сервис, который регулярно теряет или портит ваши данные, 
			если ваш email-адрес содержит символ "+" (знак плюс)


Совет: покрывайте всевозможными тестами низкоуровневый код и код с внутренней логикой, 
сложной для понимания.

	Планирование тестовых сценариев

Для низкоуровневого кода есть следующие техники планирования тестовых сценариев:
	* Разделение по классам эквивалентности — всё множество входных значений (или ситуаций, 
		если смотреть шире) мысленно разделяется на несколько классов эквивалентности, 
		и внутри каждого класса ожидаемое поведение одинаково
		- Достаточно одного позитивного тестового сценария на один класс эквивалентности
	* Анализ граничных значений — проверяется поведение на граничных значениях входных данных 
		и/или на границах классов эквивалентности
		- Например, если функция работает по-разному для положительных и отрицательных чисел, 
			то граничным значением будет 0

	Test Driven Development

Разработка через тестирование (англ. Test Driven Development, кратко TDD) — это техника, в рамках которой 
написание модуля — то есть обычно функции или класса — происходит вслед за написанием тестов этого модуля

TDD может использоваться для написания тестов.

Можно писать тесты, не следуя TDD — любая техника подойдёт, если в конечном счёте вы получаете 
качественные тесты и качественную реализацию.

	Кратко о TDD

В рамках TDD тесты на шаг опережают реализацию модуля, при этом программист циклически выполняет три шага:
	* Пишет очередной тестовый сценарий из заранее составленного плана
	* Обновляет реализацию модуля (функции или класса), чтобы пройти все тесты (включая только что написанный)
	* Проводит рефакторинг кода, если это необходимо

	Каноничный TDD

Чтобы понять TDD правильно, следует рассматривать в контексте его истории:
	* Концепция TDD сформулирована Кентом Беком (Kent Beck) в книге «Extreme Programming Explained: Embrace Change», 
		вышедшей в 2000-м году
		- TDD задуман как часть методологии XP (сокр. от Extreme Programming), которая является одной из реализаций 
			манифеста Agile наравне с методологиями Scrum, Kanban и другими
	* Программисты часто понимают TDD неправильно либо неточно, поэтому Кент Бек неоднократно разъяснял идею TDD подробнее
	* В декабре 2023 года Кент Бек опубликовал статью Canon TDD (https://tidyfirst.substack.com/p/canon-tdd), 
		где в очередной раз разъяснил TDD

Итак, каноничный TDD по статье Canon TDD выполняется по следующему алгоритму: (см. рис. "Canon_TDD.png")

	Подытожим

* В модульных тестах различают позитивные и негативные тестовые сценарии
	- Негативные тесты важны для низкоуровневых функций и функций со сложной внутренней логикой 
		для предотвращения трудноуловимых багов и уязвимостей
* Планирование тестовых сценариев основано на двух концепциях
	- Разделение по классам эквивалентности
	- Анализ граничных значений
* Разработка через тестирование (англ. Test Driven Development, кратко TDD) — это техника, в рамках которой 
	написание модуля — то есть обычно функции или класса — происходит вслед за написанием тестов этого модуля
	- Можно писать тесты, не следуя TDD — любая техника подойдёт, если в конечном счёте вы получаете качественные 
		тесты и качественную реализацию.
