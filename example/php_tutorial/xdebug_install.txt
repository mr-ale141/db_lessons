Install xdebug:

# Обновление данных о пакетах
sudo apt-get update
# Установка пакетов
sudo apt-get install php-xdebug
# Проверка наличия xdebug в списке модулей интерпретатора PHP
php -m | grep debug

Set config:

По умолчанию XDebug 3 подключается в режиме develop, что означает недоступность режимов отладки и профилирования.
Единственный эффект XDebug в режиме develop — это улучшенный stacktrace для фатальных ошибок и улучшенный вывод встроенной функции var_dump() 
Чтобы выполнять отладку, потребуется включить для XDebug режим debug.
Найдите файл конфигурации и откройте его в редакторе, чтобы добавить строку xdebug.mode = debug:

php -i | grep xdebug.ini

# Открыть в nano и добавить строку:
#    xdebug.mode=debug
sudo nano /etc/php/8.3/cli/conf.d/20-xdebug.ini

# ... или открыть в gedit
sudo gedit /etc/php/8.3/cli/conf.d/20-xdebug.ini

# Проверяем xdebug.mode (должен быть debug)
php -i | grep xdebug.mode

Горячие клавиши консольного редактора nano:
Ctrl+O сохранить файл
Ctrl+X - закрыть редактор
Пример содержимого файла 20-xdebug.ini после редактирования:
zend_extension=xdebug.so

xdebug.mode = debug

Отладка с помощью XDebug
XDebug — это расширение PHP, предзназначенное для отладки и профилирования PHP-скриптов.
Отладка — режим выполнения программы, позволяющий контролировать исполнение кода с целью анализа или исправления
Профилирование — режим выполнения программы, позволяющий замерить производительность всех этапов выполнения
Инструкция покажет вам, как настроить отладку для PHP с помощью расширения XDebug и редактора Visual Studio Code.
1. Установка xdebug в Ubuntu Linux
1.1. Установка пакета xdebug
Выполните в терминале установку:
# Обновление данных о пакетах
sudo apt-get update
# Установка пакетов
sudo apt-get install php-xdebug
# Проверка наличия xdebug в списке модулей интерпретатора PHP
php -m | grep debug
1.2. Конфигурирование xdebug
По умолчанию XDebug 3 подключается в режиме develop, что означает недоступность режимов отладки и профилирования.
Единственный эффект XDebug в режиме develop — это улучшенный stacktrace для фатальных ошибок и улучшенный вывод встроенной функции var_dump() 
Чтобы выполнять отладку, потребуется включить для XDebug режим debug.
Найдите файл конфигурации и откройте его в редакторе, чтобы добавить строку xdebug.mode = debug:
php -i | grep xdebug.ini

# Открыть в nano и добавить строку:
#    xdebug.mode=debug
sudo nano /etc/php/8.3/cli/conf.d/20-xdebug.ini

# ... или открыть в gedit
sudo gedit /etc/php/8.3/cli/conf.d/20-xdebug.ini

# Проверяем xdebug.mode (должен быть debug)
php -i | grep xdebug.mode
Горячие клавиши консольного редактора nano:
Ctrl+O сохранить файл
Ctrl+X - закрыть редактор
Пример содержимого файла 20-xdebug.ini после редактирования:
zend_extension=xdebug.so

xdebug.mode = debug

2. Установка xdebug в Windows
2.1. Загрузка расширения xdebug

Откройте страницу https://xdebug.org/download и в разделе “Windows binaries” выберите сборку xdebug в зависимости от своей версии PHP
Например, для PHP 8.3 выберите PHP 8.3 VS16 (64 bit)
В результате у вас должен быть загружен файл php_xdebug-*-nts-x86_64.dll.
Переименуйте данный файл в php_xdebug.dll и скопируйте в подкаталог ext каталога с дистрибутивом PHP.
Например, PHP установлен в каталог C:\php\php-8.3-nts\
В этом случае php_xdebug.dll следует поместить в C:\php\php-8.3-nts\ext
Скриншот страницы загрузки:

Как узнать версию PHP в системе
Если вы не знаете версию PHP, выполните в консоли: php --version
Вывод команды будет выглядеть примерно так:
PHP 8.0.15 (cli) (built: Jan 29 2022 07:24:52) ( NTS )
Copyright (c) The PHP Group
Zend Engine v4.0.15, Copyright (c) Zend Technologies
with Zend OPcache v8.0.15, Copyright (c), by Zend Technologies
Обратите внимание на две строки:
Версия PHP: в примере выше это 8.0.15
Флаг TS / NTS: в примере выше имеет значение NTS
NTS означает “not thread-safe”, это обычная сборка PHP
TS означает “thread-safe”, это узкоспециализированная сборка PHP с поддержкой многопоточности
Как узнать путь к дистрибутиву PHP
Если вы не знаете путь к дистрибутиву PHP, выполните в консоли: php --ini
Пусть к файлу php.ini — это и есть путь к дистрибутиву.
2.2. Подключение xdebug
Затем откройте файл php.ini в Visual Studio Code
Например, PHP установлен в каталог C:\php\php-8.2-nts\
В этом случае путь к файлу такой: C:\php\php-8.2-nts\php.ini
Если у вас нет файла php.ini, вернитесь к  инструкции по установке PHP8
Добавьте в конец php.ini следующее:
; Предполагаем, что в подкаталоге ext/ находится файл php_xdebug.dll
[xdebug]
zend_extension=php_xdebug
xdebug.mode = debug
xdebug.client_host = 127.0.0.1
xdebug.client_port = 9003
3. Настройка Visual Studio Code
3.1. Установка плагина PHP Debug
В Visual Studio Code откройте панель Расширения (Extensions) и найдите плагин “PHP Debug” в поиске:

3.2. Создание отладочной конфигурации
В Visual Studio Code откройте панель “Запуск и отладка” (“Run and Debug”) и нажмите “create a launch.json file”.
Если предлагается выбор, выберите PHP Debug

В результате появится файл конфигурации launch.json, который вы можете закрыть.
Одновременно на панели “Запуск и отладка” (“Run and Debug”) появится несколько конфигураций отладки.
Дальше мы будем использовать конфигурацию “Listen for Xdebug”, которая запускает xdebug-сервер на порту 9003.

4. Расширение XDebug Helper в браузере
Установите расширение XDebug Helper для вашего браузера.
Прямые ссылки на расширение:
Yandex Browser и Chrome: Xdebug helper
Firefox: Xdebug Helper for Firefox
После установки расширения в правом верхнем углу браузера появится кнопка расширения, позволяющая активировать режим “Debug” (отладка через XDebug).
Режим действует в пределах одной вкладки браузера (на другой вкладке его потребуется включить снова)
Суть XDebug Helper в том, что в активном состоянии он добавляет в запросы заголовок “Cookie: XDEBUG_SESSION=XDEBUG_ECLIPSE”, на который реагирует расширение php-xdebug при обработке HTTP-запроса интерпретатором PHP

5. Процесс отладки
5.1. Как начать отладку
Сделайте следующее:
Запустите Listen for XDebug в отладочной панели VSCode
Установите breakpoint внутри какой-либо функции или на первой исполняемой строке
Запустите встроенный веб-сервер PHP: php -S 127.0.0.1:8000
Откройте в браузере: http://127.0.0.1:8000
Нажмите кнопку расширения XDebug Helper и активируйте режим Debug
Перезагрузите страницу в браузере (клавиша F5)
Ожидаемый результат: сработал breakpoint в VSCode, вам доступен интерфейс отладчика

5.3. Отладка консольных команд
Для активации XDebug при выполнении консольных команд можно установить переменные окружения.
В консоли Windows:
set XDEBUG_CONFIG="idekey=123"
set PHP_IDE_CONFIG=serverName=localhost
В консоли Linux:
export XDEBUG_CONFIG="idekey=123"
export PHP_IDE_CONFIG=serverName=localhost
