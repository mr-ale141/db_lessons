	PDO — чтение данных
	
	Методы класса PDO
	
SQL-запросы выполняются вызовом методов объекта PDO.

Для этого PDO предоставляет три метода: query, exec и prepare.

	* Метод query выполняет SQL-запрос
		- объявление метода: query(string $query, int $fetchMode): PDOStatement
		- возвращённый объект PDOStatement позволяет обратиться к результатам
	* Метод exec выполняет SQL-запрос, но игнорирует его результаты
		- объявление метода: exec(string $query): int
		- возвращённое целое число — количество затронутых строк, что в случае 
		MySQL означает количество строк, фактически изменённых запросом INSERT / UPDATE / DELETE
		- есть нюанс: для запроса INSERT с конструкцией ON DUPLICATE KEY UPDATE количество
		затронутых строк имеет иной смысл 
	* Метод prepare создаёт подготовленный запрос (англ. prepared statement)
		- объявление метода: prepare(string $query, array $options): PDOStatement
		- возвращённый объект PDOStatement ещё не содержит результатов, но позволяет выполнить 
		запрос с заданными параметрами, после чего можно обратиться к результатам
		
	Пример

Выполнение запроса методом query:

# Создание объекта PDO $connection
$connection = connectDatabase();

# Вызов метода query()
$query = <<<SQL
    SELECT
        id,
        title,
        content
    FROM post
    WHERE id = $id
    SQL;
$statement = $connection->query($query);

	Режим обработки ошибок
	
Расширение PDO предоставляет три режима обработки ошибок, возникших при выполнении SQL-запросов:
	* PDO::ERRMODE_SILENT — при ошибке установить внутренний код ошибки и вернуть false из вызванного метода
		- Получить информацию об ошибке можно методами $pdo->errorCode() и $pdo->errorInfo()
		- В этом режиме программист обязан самостоятельно проверить результат каждого вызова 
		query(), exec() или prepare() и как-то обработать ошибку
	* PDO::ERRMODE_WARNING — при ошибке сгенерировать системное сообщение уровня E_WARNING и вернуть false из вызванного метода
		- По умолчанию системные сообщения просто логируются
		- Программист может поменять способ обработки системных сообщений — подробнее об этом сказано 
		в документации функции set_error_handler() (https://www.php.net/manual/ru/function.set-error-handler.php)
		- В этом режиме программист также обязан проверять результат вызова методов PDO
	* PDO::ERRMODE_EXCEPTION — при ошибке выбросить исключение класса PDOException
		- В этом режиме методы PDO никогда не вернут false (т.к. в случае ошибки бросается исключение)

	Какой режим выбрать

В современном PHP ошибки лучше обрабатывать с помощью исключений. Следовательно, вам нужен режим PDO::ERRMODE_EXCEPTION.

А какой режим установлен в PDO по умолчанию?
	* До версии PHP 8.0 режимом по умолчанию был PDO::ERRMODE_SILENT
	* Начиная с PHP 8.0, режим по умолчанию — PDO::ERRMODE_EXCEPTION

	Как установить режим

Установить режим можно явно при создании объекта PDO, указав соответствующую опцию 4-м аргументом:

return new PDO(
  $config['dsn'],
  $config['user'],
  $config['password'],
  [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
);

	Получение результатов запроса

	Способы представления результатов

Напомним, что результаты запроса — это реляционная таблица, аналогичная таблицам, физических хранящимся в базе данных.

Допустим, SQL-запрос вернул таблицу со схемой (code, name) со списком стран, где итальянский язык имеет официальный статус:
|#code | name         |
|------|--------------|
| IT   | Italy        |
| CH   | Switzerland  |
| SM   | San Marino   |
| VA   | Vatican City |

В языке PHP представить данные одной строки можно несколькими способами:
	* В виде ассоциативного массива, где названия колонок — это ключи
		- Пример: ['code' => 'IT', 'name' => 'Italy']
	* В виде линейного массива, где порядок значений соответствует порядку выражений в списке выбора SQL-запроса
		- Пример: ['IT', 'Italy']
	* В виде объекта stdobject, названия полей которого соответствуют названиям колонок
		- stdobject в PHP — специальный класс, в который можно записать свойство с любым названием, например: $obj->version = '3.11'
		- В данном случае PDO запишет в stdobject два свойства, которые можно получить так: $result->code, $result->name

	Методы группы fetch

Объект PDOStatement, получаемый после выполнения запроса, имеет методы fetch, fetchAll и fetchColumn, 
которые отвечают за получение данных в разных представлениях и разными срезами

	* Метод fetch(int $mode) возвращает следующую строку таблицы результатов
		- Первый вызов fetch() вернёт первую строку результатов
		- Если очередного результата нет, то метод вернёт false
	* Метод fetchAll(int $mode) возвращает все строки результатов в виде линейного массива
		- Если результатов нет, то метод вернёт false
	* Метод fetchColumn(int $column = 0) читает следующую строку результатов и возвращает 
	только одну колонку, выбирая колонку по индексу
		- аргумент $column необязателен
		- fetchColumn(0) эквивалентен fetch(PDO::FETCH_COLUMN)

	Fetch mode

За выбор способа представления данных одной строки отвечает параметр mode (также называемый fetch mode):
	* PDO::FETCH_ASSOC — строка результатов превращается в ассоциативный массив
		- Пример: ['code' => 'IT', 'name' => 'Italy']
	* PDO::FETCH_NUM — строка результатов превращается линейный массив, а порядок значений соответствует 
	порядку выражений в списке выбора SQL-запроса
		- Пример: ['IT', 'Italy']
	* PDO::FETCH_COLUMN — из строки результатов выбирается одна колонка
		- Пример: 'IT'
		- Это удобно для запросов, возвращающих одну колонку — так, вызов fetchAll(PDO::FETCH_COLUMN) 
		вернёт линейный массив значений вместо линейного массива ассоциативных массивов с одним ключом

Другие режимы используются реже, ознакомиться с ними можно в документации PDO.

	Функция на PHP

Чтобы получить данные поста по ID, напишем функцию:
	* применим метод query() для выполнения запроса
	* применим метод fetch() для получения одного результата
	* функция возвращает array — это ассоциативный массив, и для описания его структуры мы применим phpdoc-комментарий

/**
 * Извлекает из БД данные поста с указанным ID.
 * Возвращает null, если пост не найден
 *
 * @param PDO $connection
 * @param int $id
 * @return array{
 *     id:int,
 *     description:string,
 *     image_id:string,
 *     author_name:string,
 *     created_at:string,
 * }|null
 */
function findPostInDatabase(PDO $connection, int $id): ?array
{
    $query = <<<SQL
        SELECT
            id,
            image_id,
            description,
            author_name,
            created_at
        FROM post
        WHERE id = $id
        SQL;

    $statement = $connection->query($query);
    $row = $statement->fetch(PDO::FETCH_ASSOC);

    return $row ?: null;
}

Обратите внимание на название и возвращаемый тип метода:
	* Глагол find (рус. найти) подразумевает, что результата может не быть
		- В отличии от find, глагол get (рус. получить) подразумевает, что результат есть всегда
	* Метод fetch() вернёт false, если поста с таким ID нет
	* В языке PHP удобнее обозначать отсутствие результата типом null, поэтому мы применим 
	сокращённый тернарный оператор, который обратит false в null
		- Обычный тернарный оператор: $row ? $row : null
		- Сокращённый тернарный оператор: $row ?: null

	Функция на PHP

Напишем функцию для получения заданного количества свежих постов:
	* Применим метод fetchAll(PDO::FETCH_ASSOC) для получения результатов в виде линейного массива, состоящего из ассоциативных массивов
		- Если результатов нет, вернётся пустой массив
	* Опишем структуру массива средствами phpdoc

/**
 * Извлекает из БД список недавних постов
 *
 * @param PDO $connection
 * @param int $limit
 * @return array{
 *      id:int,
 *      description:string,
 *      image_id:string,
 *      author_name:string,
 *      created_at:string
 *  }[]
 */
function getRecentPostsFromDatabase(PDO $connection, int $limit): array
{
    $query = <<<SQL
        SELECT
            id,
            image_id,
            description,
            author_name,
            created_at
        FROM post
        ORDER BY id DESC
        LIMIT $limit
        SQL;

    return $connection->query($query)->fetchAll(PDO::FETCH_ASSOC);
}

Метод fetch тоже можно использовать для получения всех строк результатов с помощью цикла:

$results = [];
while ($result = $statement->fetch(PDO::FETCH_ASSOC))
{
    $results[] = $result;
}

Цикл будет последовательно читать строки результатов и остановится, когда fetch вернёт false.

	Подытожим
	
	* PDO предоставляет три метода для выполнения SQL-запросов — query, exec и prepare
		- Метод query выполняет SQL-запрос и возвращает объект PDOStatement для доступа к результатам
		- Метод exec выполняет SQL-запрос, но игнорирует его результаты, возвращая только число задетых строк
		- Метод prepare создаёт подготовленный запрос (англ. prepared statement)
	* Для чтения данных класс PDOStatement предоставляет методы fetch, fetchAll и fetchColumn
		- Метод fetch читает следующую строку таблицы результатов или возвращает false, если результаты закончились
		- Метод fetchColumn читает следующую строку аналогично fetch, но возвращает только заданную колонку
		- Метод fetchAll возвращает все строки результатов в виде линейного массива
	* Начиная с PHP 8.0, в PDO по умолчанию включён режим PDO::ERRMODE_EXCEPTION — в этом режиме PDO выбрасывает 
	исключения при ошибках выполнения SQL-запросов













































