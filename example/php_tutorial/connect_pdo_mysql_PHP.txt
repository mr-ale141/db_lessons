	Соединение с базой данных

	Создание объекта PDO

Для установки соединения с СУБД достаточно создать объект класса PDO:

new PDO($dsn, $user, $password, $options);
	* $dsn — это строка DSN
		Пример: mysql:host=127.0.0.1;dbname=catboard
		Префикс mysql:  в строке DNS активирует драйвер pdo_mysql
	* $user — имя пользователя MySQL
	* $password — пароль пользователя MySQL
	* $options — опциональный словарь, ключами в котором служат так называемые атрибуты подключения, например, PDO::ATTR_AUTOCOMMIT

	На практике обычно устанавливаются DSN и параметры авторизации, а параметр $options 
пропускается, потому что опции по умолчанию годятся для большинства приложений.

	Что такое объект PDO

Один объект класса PDO удерживает одно соединение с сервером MySQL, что соответствует одной сессии работы с базой данных
	* соединение устанавливается, когда вызывается конструктор класса PDO
	* соединение разрывается, когда объект класса PDO окончательно удаляется (например, при завершении PHP-скрипта)

	Чтение параметров подключения

Размещать параметры подключения к СУБД прямо в PHP-скрипте — это очень плохая практика:
	* В реальных проектах всегда есть разные окружения — development для разработки, тестовые стенды для 
		контроля качества и production для боевой работы — во всех случаях параметры подключения к СУБД будут разными
	* Параметры подключения в produciton среде являются секретами и не должны быть известны всем, у кого может быть доступ к исходному коду

Вместо этого используется конфигурирование приложения через окружение.

Есть три способа конфигурирования приложения в зависимости от окружения:
	* Конфигурационные файлы, которые не отслеживаются в Git благодаря настройке файла .gitignore
	* Переменные окружения, передаваемые процессу приложения при запуске
	* Аргументы командной строки, также передаваемые при запуске

	Конфигурирование через INI-файл

Данный метод прост в понимании и использует только встроенные средства языка PHP. В реальном проекте скорее всего будет выбран иной подход.

В проекте мы можем создать каталог config/ и разместить в нём файл db.ini:

	dsn = 'mysql:host=127.0.0.1;dbname=catboard'
	user = catboard
	password = Ook4au5a

Такой файл можно прочитать в PHP-скрипте функцией parse_ini_file():

	$config = parse_ini_file($configPath);

Функция возвращает либо false (в случае ошибки), либо array — ассоциативный массив такого вида:

	[
	    'dsn' => 'mysql:host=127.0.0.1;dbname=catboard',
	    'user' => 'catboard',
	    'password' => 'Ook4au5a'
	];

	Функция connectDatabase()

Соединение с базой данных — это задача, для которой лучше написать отдельную функцию: function connectDatabase(): PDO

Алгоритм работы функции:
	* Получить путь к файлу конфигурации
		- Если такого файла не существует, выбросить исключение
	* Разобрать файл по формату INI встроенной функцией parse_ini_file()
		- При ошибке разбора выбросить исключение
	* Проверить наличие необходимых параметров конфигурации
	* Создать объект PDO
	
Реализация:

/**
 * Создаёт объект класса PDO, представляющий подключение к MySQL.
 */
function connectDatabase(): PDO
{
    $configPath = getConfigPath(DATABASE_CONFIG_NAME);
    if (!file_exists($configPath))
    {
        throw new RuntimeException(
            "Could not find database configuration at '$configPath'"
        );
    }
    $config = parse_ini_file($configPath);
    if (!$config)
    {
        throw new RuntimeException(
           "Failed to parse database configuration from '$configPath'"
        );
    }

    // Проверяем наличие всех ключей конфигурации.
    $expectedKeys = ['dsn', 'user', 'password'];
    $missingKeys = array_diff($expectedKeys, array_keys($config));
    if ($missingKeys)
    {
        throw new RuntimeException(
            'Wrong database configuration: missing options ' . implode(' ', $missingKeys)
        );
    }

    return new PDO($config['dsn'], $config['user'], $config['password']);
}

	Подытожим
	
	* Расширение PDO — универсальный модуль, предоставляющий единый интерфейс для различных реляционных СУБД
	* Для работы с конкретной СУБД используется драйвер — отдельное расширение PHP, ответственное за работу с конкретной СУБД
	* Для соединения с СУБД достаточно создать объект PDO
		- new PDO($dsn, $user, $password, $options);
	* Параметры подключения принято передавать из внешнего окружения через файлы конфигурации, переменные окружения или аргументы командной строки
	* В языке PHP соблюдайте правило — открывать только одно соединение с базой данных на один запуск скрипта

	Затраты памяти на соединение
	
Для клиент-серверных СУБД каждое соединение с ними влечёт затраты ресурсов на сервере:
	* MySQL удерживает определённый объём памяти для каждого соединения, чтобы гарантировать хорошую производительность
		- Точные затраты памяти на каждое соединение зависят от конфигурации MySQL
		- MySQL 8.0 с настройками по умолчанию резервирует 18 МБ памяти на одно соединение
	* Ресурсы компьютера, на котором работает СУБД, всегда имеют ограничения
	* Если же СУБД израсходует всю доступную память, то произойдёт аварийный отказ и база данных станет 
	недоступной (как минимум до перезапуска Unix-сервиса СУБД)
Как следствие, клиент-серверные СУБД стремятся ограничить возможность открывать слишком много соединений.

Параметр max_connections

В MySQL есть параметр конфигурации max_connections, определяющий максимальное число одновременно открытых соединений
	* Узнать текущее значение можно запросом: SELECT @@max_connections;
	* По умолчанию max_connections равен 151

Что произойдёт, если MySQL уже открыл максимальное число соединений, а кто-то запрашивает ещё одно соединение?
Будет ошибка — MySQL Error 1040: Too Many Connections

	-- Формула для MySQL 8
	-- Результат в мегабайтах
	-- См. https://gist.github.com/v0112358/8ab917ac7af92609b9f566fa42c579be
	SELECT
	   (@@read_buffer_size
		+ @@read_rnd_buffer_size
		+ @@sort_buffer_size
		+ @@join_buffer_size
		+ @@binlog_cache_size
		+ @@thread_stack
		+ @@max_heap_table_size
	   ) / (1024 * 1024)
	  AS memory_per_connection_mb;

	InnoDB buffer pool

InnoDB buffer pool — это большая область оперативной памяти, в которую MySQL выгружает наиболее 
востребованные страницы памяти (напомним, что на страницах памяти строятся B+-деревья, а одна страница 
в MySQL по умолчанию занимает 16 КБ)

Узнать текущий размер InnoDB buffer pool можно запросом 

	SELECT @@innodb_buffer_pool_size

	* По умолчанию в MySQL 8.0 этот параметр равен 128 МБ
	* В реальной производственной среде на InnoDB buffer pool будет отведено от 
	40% до 60% всей оперативной памяти машины
	* Другими словами, на физическом сервере с 128 ГБ оперативной памяти значение 
	@@innodb_buffer_pool_size будет составлять порядка 64 ГБ


Достаточный размер InnoDB buffer pool — это главное условие хорошей производительности MySQL.

	Общие затраты памяти
	
MySQL тратит часть памяти на общие буферы (используемые всеми соединениями), 
а другую часть — на буферы, закреплённые за конкретным соединением.

Общие затраты памяти MySQL вычисляются по формуле:
	* объём общих буферов + (число соединений × объём буферов соединения) 

Очевидно, что затраты памяти зависят от числа соединений, открытых в данный момент времени:
	* Минимальные затраты случаются при отсутствии соединений и равны объёму общих буферов
	* Максимальные затраты случаются при открытии максимального числа соединений

Определить ожидаемый максимум потребления памяти для текущей конфигурации MySQL можно таким SQL-запросом:

	SELECT
	  (@@key_buffer_size
		+ @@innodb_buffer_pool_size
		+ @@innodb_log_buffer_size
		+ @@max_connections * (
		  @@read_buffer_size
			+ @@read_rnd_buffer_size
			+ @@sort_buffer_size
			+ @@join_buffer_size
			+ @@binlog_cache_size
			+ @@thread_stack
			+ @@max_heap_table_size)
		) / (1024 * 1024)
		AS max_memory_mb;
		
Результат запроса в MySQL 8.0 с настройками по умолчанию — 2856 МБ, то есть почти 3 ГБ!

	СУБД на отдельном сервере
	
Обычно в производственной среде СУБД на отдельном сервере, который к тому же недоступен из внешней сети.

На этой есть две причины:
	* Безопасность — недоступность сервера СУБД из внешней сети (т.е. из Интернета) 
	уменьшает поверхность атаки, добавляя дополнительный слой безопасности
	* Контроль ресурсов — резервирование ресурсов для СУБД упрощает планирование расхода памяти и CPU 
	и конфигурирование СУБД, а также избавляет от ситуаций, когда выделенную для СУБД память израсходовал другой процесс

	Подытожим
	
	* Выполнение SQL-запросов требует определённых затрат памяти на различные буферы
	* Клиент-серверные СУБД стремятся зарезервировать ресурсы для каждого соединения и 
	ограничить возможность открывать слишком много соединений
	* Чтобы не превысить лимит и сэкономить ресурсы СУБД, старайтесь при каждом выполнении 
	PHP-скрипта устанавливать только одно соединение с базой данных













